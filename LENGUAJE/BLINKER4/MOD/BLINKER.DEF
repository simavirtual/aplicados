(**************************************************************
*
* Blinker 2.1 definition module for Stony Brook Modula 2
*
* Copyright (C) ASM Inc, 1992, 1993
*
***************************************************************)

DEFINITION MODULE Blinker;

(*/NOMODINIT*)

FROM SYSTEM IMPORT ADDRESS;

TYPE
    CSTR = ARRAY [0..255] OF CHAR ;

PROCEDURE BLICUROVL ['_BLICUROVL'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLICURSIZ ['_BLICURSIZ'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIDBGHAN ['_BLIDBGHAN'] (handle : CARDINAL) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIDEMCAL ['_BLIDEMCAL'] (count : CARDINAL) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIDEMDTE ['_BLIDEMDTE'] ( ) : ADDRESS [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIDEMMIN ['_BLIDEMMIN'] (count : CARDINAL) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIDISTRC ['_BLIDISTRC'] ( ) [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIERRNUM ['_BLIERRNUM'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIERRPRM ['_BLIERRPRM'] ( ) : ADDRESS [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIOVLOPS ['_BLIOVLOPS'] ( ) : LONGINT [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIOVLRES ['_BLIOVLRES'] ( ) [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIOVLSIZ ['_BLIOVLSIZ'] ( ) : LONGINT [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIOVLSUS ['_BLIOVLSUS'] (level : CARDINAL) [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLISERNUM ['_BLISERNUM'] ( ) : ADDRESS [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLITOTACT ['_BLITOTACT'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLITOTLOD ['_BLITOTLOD'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLITOTSIZ ['_BLITOTSIZ'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE BLIVERNUM ['_BLIVERNUM'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;

PROCEDURE SWPADDENV ['_SWPADDENV'] ( ExtraBytes : CARDINAL )
                    : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPADDSTR ['_SWPADDSTR'] ( IdString : ADDRESS; RetString : ADDRESS )
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPCURDIR ['_SWPCURDIR'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPDISMSG ['_SWPDISMSG'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPEMS320 ['_SWPEMS320'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPERRLEV ['_SWPERRLEV'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPERRMAJ ['_SWPERRMAJ'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPERRMIN ['_SWPERRMIN'] ( ) : CARDINAL [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPFREEMS ['_SWPFREEMS'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPFREXMS ['_SWPFREXMS'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPGETKEY ['_SWPGETKEY'] ( flag : BOOLEAN )
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPGETPID ['_SWPGETPID'] ( IdString : ADDRESS)
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPGETSTR ['_SWPGETSTR'] ( ) : ADDRESS [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPKEYBRD ['_SWPKEYBRD'] ( KeyString : ADDRESS)
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPKEYCLR ['_SWPKEYCLR'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPNOBOOT ['_SWPNOBOOT'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPRUNCMD ['_SWPRUNCMD'] ( Command : ADDRESS; Memory :CARDINAL; RunPath :ADDRESS; TempPath :ADDRESS)
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPSETENV ['_SWPSETENV'] ( EnvString : ADDRESS)
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPSETPID ['_SWPSETPID'] ( IdString : ADDRESS)
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPSETSTR ['_SWPSETSTR'] ( IdString : ADDRESS; RetString : ADDRESS )
                    : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPUSEEMS ['_SWPUSEEMS'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPUSEUMB ['_SWPUSEUMB'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPUSEXMS ['_SWPUSEXMS'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;
PROCEDURE SWPVIDMDE ['_SWPVIDMDE'] (flag : BOOLEAN) : BOOLEAN [REVERSED, LONG, LARGE, LEAVES, ALTERS (ES,AX,BX,CX,DX)] ;


(* SWPMAJERR codes *)

CONST

 SWPNONERR = 0 ;  (* No error *)
 SWPDSKFUL = 1 ;  (* Disk full *)
 SWPDSKOPE = 2 ;  (* Disk file open error *)
 SWPDSKERR = 3 ;  (* Disk i/o error *)
 SWPDIRERR = 4 ;  (* Change directory error *)
 SWPCREERR = 5 ;  (* Temp file create error *)
 SWPDRVERR = 6 ;  (* Change drive error *)
 SWPEMSERR = 7 ;  (* EMS error *)
 SWPXMSERR = 8 ;  (* XMS error *)
 SWPCMDERR = 9 ;  (* SHELL error *)
 SWPHANERR = 10 ; (* Handle table too large to save *)
 SWPMEMERR = 11 ; (* Top of memory decreased error *)
 SWPMCBERR = 12 ; (* MCB chain corrupt *)
 SWPMCBCNT = 13 ; (* Too many MCBs (128 max) *)
 SWPBLKERR = 14 ; (* DOS memory function call error *)
 SWPMEMRES = 15 ; (* Error reallocating program segment *)
 SWPCSPERR = 16 ; (* COMSPEC variable not found *)
 SWPINTERR = 254; (* Internal error *)

(* Non fatal SWPERRMIN( ) codes when SWPERRMAJ( ) = 0 *)

 SWPKILTSR = 1;   (* TSR was removed *)
 SWPMEMINC = 2;   (* Top of DOS memory increased *)

END Blinker.
